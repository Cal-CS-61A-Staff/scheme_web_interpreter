(define (piece type color file rank) (list type color file rank))
(define (type piece) (car piece))
(define (piece-color piece) (car (cdr piece)))
(define (file piece) (car (cdr (cdr piece))))
(define (rank piece) (car (cdr (cdr (cdr piece)))))

(define (draw-piece piece)
  (define (draw-rook x y) (seth 90) (goto (+ x 15) (+ y 10))
    (begin_fill) (fd 50) (left 90) (fd 10) (left 45) (fd 14.14) (right 45)
    (fd 20) (right 45) (fd 14.14) (left 45) (fd 10) (left 90) (fd 10)
    (left 90) (fd 10) (right 90) (fd 10) (right 90) (fd 10) (left 90)
    (fd 10) (left 90) (fd 10) (right 90) (fd 10) (right 90) (fd 10)
    (left 90) (fd 10) (left 90) (fd 10) (left 45) (fd 14.14) (right 45)
    (fd 20) (right 45) (fd 14.14) (left 45) (end_fill))
  (define (draw-pawn x y) (seth 0) (goto (+ x 65) (+ y 15))
    (begin_fill) (circle 25 181) (end_fill) (goto (+ x 58) (+ y 47))
    (seth 0) (begin_fill) (circle 18) (end_fill))
  (define (draw-bishop x y) (seth 90) (goto (+ x 35) (+ y 10)) (begin_fill)
    (fd 10) (left 90) (fd 35) (right 90) (fd 15) (left 90) (fd 10) (left 90)
    (fd 15) (right 90) (fd 15) (left 90) (fd 10) (left 90) (fd 15)
    (right 90) (fd 15) (left 90) (fd 10) (left 90) (fd 15) (end_fill))
  (define (draw-king x y) (seth 0) (goto (+ x 60) (+ y 10)) (begin_fill)
    (circle 20 180) (end_fill) (goto (+ x 55) (+ y 35)) (seth 0) (begin_fill)
    (circle 15) (end_fill) (goto (+ x 37) (+ y 48)) (seth 90) (begin_fill)
    (fd 6) (left 90) (fd 8) (right 90) (fd 8) (left 90) (fd 6) (left 90)
    (fd 8) (right 90) (fd 8) (left 90) (fd 6) (left 90) (fd 8) (right 90)
    (fd 8) (left 90) (fd 6) (left 90) (fd 8) (right 90) (end_fill))
  (define (draw-queen x y) (seth 0) (goto (+ x 60) (+ y 10)) (begin_fill)
    (circle 20 180) (end_fill) (goto (+ x 55) (+ y 35)) (seth 0)
    (begin_fill) (circle 15) (end_fill) (goto (+ x 35) (+ y 48)) (seth 90)
    (begin_fill) (fd 10) (left 45) (fd 14.14) (left 135) (fd 30) (end_fill)
    (seth 0) (goto (+ x 48) (+ y 62)) (begin_fill) (circle 8) (end_fill))
  (define (draw-knight x y) (goto (+ x 15) (+ y 10)) (seth 90) (begin_fill)
    (fd 50) (left 90) (fd 5) (left 63.43) (fd 22.36) (right 108.43)
    (fd 28.28) (left 90) (fd 28.28) (right 45) (fd 5) (left 90)
    (circle 30 135) (goto (+ x 15) (+ y 15)) (end_fill))
  (if (equal? (piece-color piece) "white")
      (color white-piece-color)
      (color black-piece-color))
  (let ((t (type piece))
        (x (+ -400 (* 80 (file piece))))
        (y (+ -400 (* 80 (rank piece)))))
    (cond
      ((equal? t "king") (draw-king x y))
      ((equal? t "queen") (draw-queen x y))
      ((equal? t "rook") (draw-rook x y))
      ((equal? t "knight") (draw-knight x y))
      ((equal? t "bishop") (draw-bishop x y))
      ((equal? t "pawn") (draw-pawn x y))
      (else nil))))
    
(define (_draw-pieces pieces)
  (if (not (null? pieces))
      (begin (draw-piece (car pieces))
             (_draw-pieces (cdr pieces)))))
           
(define (_redraw-square f r)
  (_fill-square f r (equal? current-highlight (cons f r)))
  (define piece-there (piece-at f r))
  (if (null? piece-there) nil (draw-piece piece-there)))
      

(define (_fill-square f r highlight)
  (goto (* (- f 5) 80)
        (* (- r 5) 80))
  (if highlight
    (color highlight-color)
    (if (even? (+ f r))
        (color dark-board-color)
        (color light-board-color)))
  (begin_fill) (seth 90) (forward 80) (left 90) (forward 80)
  (left 90) (forward 80) (left 90) (end_fill))
  
(define (_draw-highlighted)
  (_fill-square (car current-highlight)
               (cdr current-highlight) #t))

(define (redraw)
  (define (make-board)
    (define (board rank)
      (define (row file)
        (if (< file 9)
            (begin (_fill-square file rank #f)
                   (row (+ file 1)))))
      (if (< rank 9)
          (begin (row 1)
                 (board (+ rank 1)))))
    (turtle-grid 640 640)
    (pensize 0)
    (goto -320 320)
    (board 1))
  
  (make-board)
  (_draw-highlighted)
  (_draw-pieces black-pieces)
  (_draw-pieces white-pieces) nil)


(define (_clone lst)
  (if (or (not (list? lst)) (null? lst)) lst
      (cons (_clone (car lst)) (_clone (cdr lst)))))

(define (reset)
  (define init-black '(("rook" "black" 1 8) ("knight" "black" 2 8)
    ("bishop" "black" 3 8) ("queen" "black" 4 8) ("king" "black" 5 8)
    ("bishop" "black" 6 8) ("knight" "black" 7 8) ("rook" "black" 8 8)
    ("pawn" "black" 1 7) ("pawn" "black" 2 7) ("pawn" "black" 3 7)
    ("pawn" "black" 4 7) ("pawn" "black" 5 7) ("pawn" "black" 6 7)
    ("pawn" "black" 7 7) ("pawn" "black" 8 7)))
  (define init-white '(("rook" "white" 1 1) ("knight" "white" 2 1)
    ("bishop" "white" 3 1) ("queen" "white" 4 1) ("king" "white" 5 1)
    ("bishop" "white" 6 1) ("knight" "white" 7 1) ("rook" "white" 8 1)
    ("pawn" "white" 1 2) ("pawn" "white" 2 2) ("pawn" "white" 3 2)
    ("pawn" "white" 4 2) ("pawn" "white" 5 2) ("pawn" "white" 6 2)
    ("pawn" "white" 7 2) ("pawn" "white" 8 2)))
  (set! black-pieces (_clone init-black))
  (set! white-pieces (_clone init-white))
  (set! current "white")
  (redraw))

(define (piece-at f r)
  (_piece-at-in f r white-pieces black-pieces))

(define (_piece-at-in f r white black)
  (define (search lst)
    (cond
      ((null? lst) nil)
      ((and (= f (file (car lst))) (= r (rank (car lst)))) (car lst))
      (else (search (cdr lst)))))
  (define in-white (search white))
  (if (null? in-white) (search black) in-white))

(define (_check-validity f1 r1 f2 r2 piece-at)
    (define (abs x) (if (< x 0) (- x) x))
    (define (line-blocked f1 r1 f2 r2)
      (cond
        ((and (<= (abs (- f1 f2)) 1) (<= (abs (- r1 r2)) 1)) false)
        ((= r1 r2)
          (let ((inc (/ (- f2 f1) (abs (- f2 f1)))))
               (if (null? (piece-at (+ f1 inc) r1))
                   (line-blocked (+ f1 inc) r1 f2 r2) true)))
        ((= f1 f2)
          (let ((inc (/ (- r2 r1) (abs (- r2 r1)))))
               (if (null? (piece-at f1 (+ r1 inc)))
                   (line-blocked f1 (+ r1 inc) f2 r2) true)))
        ((= (abs (- f1 f2)) (abs (- r1 r2)))
          (let ((finc (/ (- f2 f1) (abs (- f2 f1))))
                (rinc (/ (- r2 r1) (abs (- r2 r1)))))
               (if (null? (piece-at (+ f1 finc) (+ r1 rinc)))
                   (line-blocked (+ f1 finc) (+ r1 rinc) f2 r2) true)))
        (else false)))
    (let ((from (piece-at f1 r1)) (to (piece-at f2 r2)))
      (cond
        ((null? from) (string-append "No piece at " f1 " " r1))
        ((and (not (null? to)) (equal? (piece-color to) (piece-color from)))
          (string-append "You already have a piece at " f1 " " r1))
        ((equal? (type from) "knight")
          (if (or (and (= (abs (- f1 f2)) 1) (= (abs (- r1 r2)) 2))
                  (and (= (abs (- f1 f2)) 2) (= (abs (- r1 r2)) 1)))
              nil "Invalid move"))
        ((line-blocked f1 r1 f2 r2) "There is a piece in the way")
        ((equal? (type from) "king")
          (if (and (<= (abs (- f1 f2)) 1) (<= (abs (- r1 r2)) 1)) nil "Invalid move"))
        ((equal? (type from) "rook")
          (if (or (= f1 f2) (= r1 r2)) nil "Invalid move"))
        ((equal? (type from) "bishop")
          (if (= (abs (- f1 f2)) (abs (- r1 r2))) nil "Invalid move"))
        ((equal? (type from) "queen")
              (if (or (= f1 f2) (= r1 r2)
                      (= (abs (- f1 f2)) (abs (- r1 r2))))
                  nil "Invalid move"))
        ((equal? (type from) "pawn")
          (if (= f1 f2)
              (if (null? to)
                (if (equal? current "white")
                    (if (or (= r2 (+ r1 1)) (and (= r1 2) (= r2 4))) nil "Invalid move")
                    (if (or (= r2 (- r1 1)) (and (= r1 7) (= r2 5))) nil "Invalid move"))
                "Invalid move")
              (if (and (= (abs (- f1 f2)) 1)
                       (= r1 (+ r2 (if (equal? current "white") -1 +1)))
                       (not (null? to)))
                  nil "Invalid move")))
        (else "Invalid piece"))))

(define (_in-check king white black)
  (define (my-piece-at f r) (_piece-at-in f r white black))
  (define king-f (file king))
  (define king-r (rank king))
  (define (helper lst)
    (cond
      ((null? lst) #f)
      ((string?
         (_check-validity (file (car lst))
                          (rank (car lst))
                          king-f
                          king-r
                          my-piece-at))
        (helper (cdr lst)))
      (else #t)))
  (helper (if (equal? (piece-color king) "white") black white)))
    
(define (_find-king pieces)
  (cond ((null? pieces) nil)
        ((equal? (type (car pieces)) "king") (car pieces))
        (else (_find-king (cdr pieces)))))

(define (move f1 r1 f2 r2)
  (define (queen-me piece)
    (if (and (equal? (type piece) "pawn")
             (or (and (= (rank piece) 8)(equal? (piece-color piece) "white"))
                 (and (= (rank piece) 1) (equal? (piece-color piece) "black"))))
        (begin (set-car! piece "queen"))))
  (define (remove-piece-at f2 r2 color)
    (define piece (piece-at f2 r2))
    (define (remove-piece-from lst)
      (if (equal? piece (car lst))
          (begin (set-car! lst (car (cdr lst)))
                 (set-cdr! lst (cdr (cdr lst))))
          (remove-piece-from (cdr lst))))
    (if (null? piece) nil
      (if (equal? color "black")
        (remove-piece-from white-pieces)
        (remove-piece-from black-pieces))))
  (define (set-piece-position! piece file rank)
    (set-car! (cdr (cdr piece)) file)
    (set-car! (cdr (cdr (cdr piece))) rank))
  (if (not (equal? (piece-color (piece-at f1 r1)) current)) (error-notrace "It is not your turn"))
  (define result (_check-validity f1 r1 f2 r2 piece-at))
  (if (string? result) (error-notrace result))
  (define old-white (_clone white-pieces))
  (define old-black (_clone black-pieces))
  (remove-piece-at f2 r2 current)
  (set-piece-position! (piece-at f1 r1) f2 r2)
  (queen-me (piece-at f2 r2))
  (define king (_find-king (if (equal? current "white") white-pieces black-pieces)))
  (if (_in-check king white-pieces black-pieces)
      (begin
        (set! white-pieces old-white)
        (set! black-pieces old-black)
        (error-notrace "You may not move yourself into check")))
  
  (set! current (if (equal? current "white") "black" "white"))
  (_redraw-square f1 r1)
  (_redraw-square f2 r2)
  (define king (_find-king (if (equal? current "white") white-pieces black-pieces)))
  
  (define (determine-check)
    (define in-check (_in-check king white-pieces black-pieces))
    (define msg (if in-check (string-append (piece-color king) " king in check\n") nil))
    ; TODO: Add checkmate detection
    (if (null? msg) nil (display msg)))
  (run-after 10 determine-check))

(define a 1) (define b 2) (define c 3) (define d 4)
(define e 5) (define f 6) (define g 7) (define h 8)

(define current-highlight (cons 0 0))
(define highlight-color "#4a4")
(define light-board-color "#ffcd9c")
(define dark-board-color 'saddlebrown)
(define white-piece-color "#57f")
(define black-piece-color 'black)

(define white-pieces nil)
(define black-pieces nil)
(define current nil)
(reset)

(listen-for 'turtle-click
  (lambda (x y)
    (define (find-square x y)
      (cons (quotient (+ x 400) 80)
            (quotient (+ y 400) 80)))
    (define (announce-move old-f old-r f r)
      (define (number->letter f)
        (cond ((= f 1) 'a) ((= f 2) 'b) ((= f 3) 'c) ((= f 4) 'd)
            ((= f 5) 'e) ((= f 6) 'f) ((= f 7) 'g) ((= f 8) 'h)))
      (define p (piece-at f r))
      (define extra "")
      (if (not (null? piece-there))
          (define extra
            (string-append " capturing " (piece-color piece-there)
                           " " (type piece-there))))
      (display (string-append
        (piece-color p) " " (type p) " moved from " (number->letter old-f)
        old-r " to " (number->letter (file p)) (rank p) extra))
      (newline))
    (define cur-high current-highlight)
    (define new-high (find-square x y))
    (define piece-there (piece-at (car new-high) (cdr new-high)))
    (if (equal? cur-high (cons 0 0))
      (if (null? piece-there)
        (if (equal? current-highlight (cons 0 0)) nil
            (begin (set! current-highlight (cons 0 0))
                   (_redraw-square (car cur-high) (cdr cur-high))))
        (begin (set! current-highlight new-high)
             (_redraw-square (car new-high) (cdr new-high))))
      (begin
        (set! current-highlight (cons 0 0))
        (_redraw-square (car cur-high) (cdr cur-high))
        (move (car cur-high) (cdr cur-high) (car new-high) (cdr new-high))
        (announce-move (car cur-high) (cdr cur-high) (car new-high) (cdr new-high))))))

(display "Use (move f1 r1 f2 r2) or click on the board to move")(newline)
(display "Files are columns a-h left to right")(newline)
(display "Ranks are rows 1-8 bottom to top")(newline)
(display "Game announces check but does not determine checkmate")(newline)
